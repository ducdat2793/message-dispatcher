spring.application.name=message-dispatcher
# Server port
server.port=8080
# Swagger
swagger.server-url=http://localhost:8080

# Google OAuth2 Login
spring.security.oauth2.client.registration.google.client-id=YOUR_CLIENT_ID
spring.security.oauth2.client.registration.google.client-secret=YOUR_CLIENT_SECRET
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# Google OAuth2 provider config 
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo

# H2 Database
spring.datasource.url=jdbc:h2:mem:msg-dispatcher-app-db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# executor.setCorePoolSize(100);
# executor.setMaxPoolSize(200);
# ==> In this project I config allow @Async method handle 100-200 thread at same time
# Default tomcat has 200 threads (request)
# Reduce to 30 threads allow easier to test in local (simulate real server)
# Use JMeter to test, example 1000 request send in same time
# => Number of thread 1000, count loop 1, ramp-up period: 1 (config in JMeter)
# Result:
# ASync api => cost about 3s (actual finish task: ~ 5238 ms)
# Sync api => cost about 34s (actual finish task: ~ 34484 ms)
server.tomcat.threads.max=30